#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec4 fragTan;layout(location = 3) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(binding = 1) uniform sampler2D tex;layout(binding = 3) uniform sampler2D spet;layout(binding = 2) uniform GlobalUniformBufferObject {    vec3 lightDir;    vec4 lightColor;    vec3 eyePos;} gubo;vec3 LambertDiffuse(vec3 N, vec3 L, vec3 Md) {    return Md * max(dot(N, L), 0.0);}vec3 WardAnisotropic(vec3 V, vec3 N, vec3 L, vec3 T, vec3 B, vec3 Ms, float alphaT, float alphaB) {    vec3 H = normalize(V + L);    float NH = max(dot(N, H), 0.0);    float NT = dot(N, T);    float NB = dot(N, B);    float rho = 1 / (4 * 3.14159265 * alphaT * alphaB * sqrt(dot(L, N) * dot(V, N)));    float exponent = -(pow(dot(H, T), 2) / pow(alphaT, 2) + pow(dot(H, B), 2) / pow(alphaB, 2)) / pow(NH, 2);    float spec = Ms.x * rho * exp(exponent);    return vec3(spec);}void main() {    vec3 Norm = normalize(fragNorm);    vec3 Tan = normalize(fragTan.xyz - Norm * dot(fragTan.xyz, Norm));    vec3 Bitan = cross(Norm, Tan) * fragTan.w;    vec3 Albedo  = texture(tex, fragUV).rgb;    vec3 SpecColor = texture(spet, fragUV).rgb;    vec3 L = normalize(gubo.lightDir);    vec3 V = normalize(gubo.eyePos - fragPos);    vec3 Diffuse = LambertDiffuse(Norm, L, Albedo);    vec3 Specular = WardAnisotropic(V, Norm, L, Tan, Bitan, SpecColor, 0.1, 0.1);    // Correct way to access rgb components of lightColor    vec3 lightColorRgb = gubo.lightColor.rgb;    outColor = vec4((Diffuse + Specular) * lightColorRgb + vec3(0.1), 1.0);}