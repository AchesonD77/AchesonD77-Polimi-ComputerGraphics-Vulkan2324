#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragTexCoord;layout(location = 0) out vec4 outColor;layout(binding = 1) uniform sampler2D texSampler;layout(binding = 2) uniform GlobalUniformBufferObject {    vec3 lightDir;    vec4 lightColor;    vec3 eyePos;} gubo;vec3 ToonBRDF(vec3 V, vec3 N, vec3 L, vec3 Md, vec3 Ms) {    float cosAlpha = max(dot(N, L), 0.0);    float cosBeta = max(dot(V, reflect(-L, N)), 0.0);    float toonDiffuse = cosAlpha > 0.8 ? 1.0 :                        cosAlpha > 0.7 ? mix(0.15, 1.0, (cosAlpha - 0.7) / 0.1) :                        cosAlpha > 0.1 ? 0.15 :                        cosAlpha > 0 ? mix(0.0, 0.15, cosAlpha / 0.1) : 0.0;    float toonSpecular = cosBeta > 0.95 ? 1.0 :                         cosBeta > 0.9 ? mix(0.0, 1.0, (cosBeta - 0.9) / 0.05) : 0.0;    vec3 Diffuse = Md * toonDiffuse;    vec3 Specular = Ms * toonSpecular;    return Diffuse + Specular;}void main() {    vec3 Norm = normalize(fragNorm);    vec3 EyeDir = normalize(gubo.eyePos - fragPos);    vec3 Albedo = texture(texSampler, fragTexCoord).rgb;    vec3 L = normalize(gubo.lightDir);    vec3 lightColor = gubo.lightColor.rgb;    vec3 DiffSpec = ToonBRDF(EyeDir, Norm, L, Albedo, vec3(1.0));    outColor = vec4(DiffSpec * lightColor + vec3(0.05), 1.0);}